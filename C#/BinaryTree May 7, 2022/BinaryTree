using System;


class Program
{
    public static int Depth<T>(BinTreeNode<T> tree)
    {
        if (tree == null) return 0;
        if (1+ Depth<T>(tree.Left) > 1 + Depth<T>(tree.Right)){
       
        return 1 + Depth<T>(tree.Left) ;
        }
        else
        {
            return 1 + Depth<T>(tree.Right);
        }

    }
    public static int NoOfNodes<T>(BinTreeNode<T> tree)
    {
        if(tree==null) return 0;
        return 1 + NoOfNodes<T>(tree.Left) + NoOfNodes<T>(tree.Right);
    }
    public static void PrintTree<T>(BinTreeNode<T> p, int level = 0)
    {
        if (p == null) return;
        Console.WriteLine("".PadLeft(level, '.') + p.Value);
        PrintTree(p.Left, level + 1);
        PrintTree(p.Right, level + 1);
    }
    public static BinTreeNode<char> CreateTreeOfChars()
    {
        BinTreeNode<char> branch =

            new BinTreeNode<char>('A',
                        new BinTreeNode<char>('B',
                            new BinTreeNode<char>('D'),
                            new BinTreeNode<char>('E')),
                         new BinTreeNode<char>('C',
                            new BinTreeNode<char>('F',
                                 new BinTreeNode<char>('H'),
                                 new BinTreeNode<char>('I')),
                            new BinTreeNode<char>('G'))
                         );



            return branch;
    }
    public static void Print<T>(BinTreeNode<T> p, int level = 0)
    {
        if (p == null) return;
        Print(p.Right, level + 1);
        Console.WriteLine("".PadLeft(level, '.') + p.Value);
        Print(p.Left, level + 1);
    }
    static void Main(string[] args)
    {
        //BinTreeNode<char> tree = CreateTreeOfChars();

        //    Print(tree);

        //var tB = new BinTreeNode<char>('B');
        //tB.Left = new BinTreeNode<char>('D');
        //tB.Right = new BinTreeNode<char>('E');
        //var tC = new BinTreeNode<char>('C',
        //            new BinTreeNode<char>('F',
        //                new BinTreeNode<char>('H'),
        //                new BinTreeNode<char>('I')),
        //            new BinTreeNode<char>('G')
        //         );
        //var t = new BinTreeNode<char>('A', tB, tC);
        //PrintTree(t);

        //var tB = new BinTreeNode<char>('B');
        //tB.Left = new BinTreeNode<char>('D');
        //tB.Right = new BinTreeNode<char>('E');
        //var tC = new BinTreeNode<char>('C',
        //            new BinTreeNode<char>('F',
        //                new BinTreeNode<char>('H'),
        //                new BinTreeNode<char>('I')),
        //            new BinTreeNode<char>('G')
        //         );
        //var t = new BinTreeNode<char>('A', tB, tC);
        //Console.WriteLine(NoOfNodes(t));

        var tB = new BinTreeNode<char>('B');
        tB.Left = new BinTreeNode<char>('D');
        tB.Right = new BinTreeNode<char>('E');
        var tC = new BinTreeNode<char>('C',
                    new BinTreeNode<char>('F',
                        new BinTreeNode<char>('H'),
                        new BinTreeNode<char>('I')),
                    new BinTreeNode<char>('G')
                 );
        var t = new BinTreeNode<char>('A', tB, tC);
        Console.WriteLine(Depth(t));
    }

    public class BinTreeNode<T>
    {
        public T Value { get; set; }
        public BinTreeNode<T> Left { get; set; }
        public BinTreeNode<T> Right { get; set; }

        public BinTreeNode(T value, BinTreeNode<T> left = null, BinTreeNode<T> right = null)
        {
            Value = value;
            Left = left;
            Right = right;
        }
      
   
    
}
}

